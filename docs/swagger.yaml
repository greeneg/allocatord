basePath: /api/v1
definitions:
  controllers.SafeUser:
    properties:
      creationDate:
        type: string
      fullName:
        type: string
      id:
        type: integer
      orgUnitId:
        type: integer
      roleId:
        type: integer
      userName:
        type: string
    type: object
  model.Architecture:
    properties:
      Id:
        type: integer
      creationDate:
        type: string
      creatorId:
        type: integer
      iseName:
        type: string
      registerSize:
        type: integer
    type: object
  model.ArchitectureList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Architecture'
        type: array
    type: object
  model.Building:
    properties:
      Id:
        type: integer
      buildingName:
        type: string
      city:
        type: string
      creationDate:
        type: string
      creatorId:
        type: integer
      region:
        type: string
      shortName:
        type: string
    type: object
  model.BuildingList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Building'
        type: array
    type: object
  model.FailureMsg:
    properties:
      error:
        type: string
    type: object
  model.MachineRole:
    properties:
      Id:
        type: integer
      creationDate:
        type: string
      creatorId:
        type: integer
      description:
        type: string
      machineRoleName:
        type: string
    type: object
  model.MachineRoleList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.MachineRole'
        type: array
    type: object
  model.NetworkInterface:
    properties:
      Id:
        type: integer
      bitmask:
        type: integer
      creationDate:
        type: string
      creatorId:
        type: integer
      deviceId:
        type: string
      deviceModel:
        type: string
      gateway:
        type: string
      ipAddress:
        type: string
      macAddress:
        type: string
      systemId:
        type: integer
    type: object
  model.NetworkInterfaces:
    properties:
      interfaces:
        items:
          $ref: '#/definitions/model.NetworkInterface'
        type: array
    type: object
  model.OperatingSystem:
    properties:
      Id:
        type: integer
      creationDate:
        type: string
      creatorId:
        type: integer
      imageUriProtocol:
        type: string
      osFamilyId:
        type: integer
      osImageUrl:
        type: string
      osName:
        type: string
      vendorId:
        type: integer
    type: object
  model.OperatingSystemFamily:
    properties:
      Id:
        type: integer
      creationDate:
        type: string
      creatorId:
        type: integer
      osFamilyName:
        type: string
    type: object
  model.OperatingSystemFamilyList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.OperatingSystemFamily'
        type: array
    type: object
  model.OperatingSystemList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.OperatingSystem'
        type: array
    type: object
  model.OrgUnit:
    properties:
      Id:
        type: integer
      creationDate:
        type: string
      creatorId:
        type: integer
      description:
        type: string
      ouName:
        type: string
    type: object
  model.OrgUnitList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.OrgUnit'
        type: array
    type: object
  model.PasswordChange:
    properties:
      newPassword:
        type: string
      oldPassword:
        type: string
    type: object
  model.ProposedUser:
    properties:
      Id:
        type: integer
      fullName:
        type: string
      orgUnitId:
        type: integer
      password:
        type: string
      roleId:
        type: integer
      status:
        type: string
      userName:
        type: string
    type: object
  model.Role:
    properties:
      Id:
        type: integer
      creationDate:
        type: string
      description:
        type: string
      roleName:
        type: string
    type: object
  model.RolesList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Role'
        type: array
    type: object
  model.StorageVolume:
    properties:
      Id:
        type: integer
      creationDate:
        type: string
      creatorId:
        type: integer
      deviceId:
        type: string
      deviceModel:
        type: string
      mountPoint:
        type: string
      storageType:
        type: string
      systemId:
        type: integer
      volumeFormat:
        type: string
      volumeLabel:
        type: string
      volumeName:
        type: string
      volumeSize:
        type: integer
    type: object
  model.StorageVolumes:
    properties:
      volumes:
        items:
          $ref: '#/definitions/model.StorageVolume'
        type: array
    type: object
  model.SuccessMsg:
    properties:
      message:
        type: string
    type: object
  model.User:
    properties:
      Id:
        type: integer
      creationDate:
        type: string
      fullName:
        type: string
      lastPasswordChangedDate:
        type: string
      orgUnitId:
        type: integer
      passwordHash:
        type: string
      roleId:
        type: integer
      status:
        type: string
      userName:
        type: string
    type: object
  model.UserOrgUnitId:
    properties:
      orgUnitId:
        type: integer
    type: object
  model.UserOrgUnitIdMsg:
    properties:
      message:
        type: string
      orgUnitId:
        type: integer
    type: object
  model.UserRoleId:
    properties:
      roleId:
        type: integer
    type: object
  model.UserRoleIdMsg:
    properties:
      message:
        type: string
      roleId:
        type: integer
    type: object
  model.UserStatus:
    properties:
      status:
        type: string
    type: object
  model.UserStatusMsg:
    properties:
      message:
        type: string
      userStatus:
        type: string
    type: object
  model.UsersList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
  model.Vendor:
    properties:
      Id:
        type: integer
      creationDate:
        type: string
      creatorId:
        type: integer
      vendorName:
        type: string
    type: object
  model.VendorList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Vendor'
        type: array
    type: object
host: localhost:5000
info:
  contact:
    name: Gary Greene
    url: https://github.com/greeneg/allocatord
  description: An API for managing OS imaging
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Allocator Daemon
  version: 0.1.5
paths:
  /architecture:
    post:
      consumes:
      - application/json
      description: Add a new architecture
      parameters:
      - description: Architecture data
        in: body
        name: architecture
        required: true
        schema:
          $ref: '#/definitions/model.Architecture'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register architecture
      tags:
      - architectures
  /architecture/{architectureId}:
    delete:
      consumes:
      - application/json
      description: Delete an architecture by Id
      parameters:
      - description: Architecture Id
        in: path
        name: architectureId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete architecture
      tags:
      - architectures
  /architecture/byId/{architectureId}:
    get:
      description: Retrieve an architecture by its Id
      parameters:
      - description: Architecture ID
        in: path
        name: architectureId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Architecture'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve an architecture by its Id
      tags:
      - architectures
  /architecture/byName/{architectureName}:
    get:
      description: Retrieve an architecture by its name
      parameters:
      - description: Architecture Name
        in: path
        name: architectureName
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Architecture'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve an architecture by its name
      tags:
      - architectures
  /architectures:
    get:
      description: Retrieve list of all architectures
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ArchitectureList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of all architectures
      tags:
      - architectures
  /building:
    post:
      consumes:
      - application/json
      description: Add a new building
      parameters:
      - description: Building data
        in: body
        name: building
        required: true
        schema:
          $ref: '#/definitions/model.Building'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register building
      tags:
      - buildings
  /building/{buildingId}:
    delete:
      consumes:
      - application/json
      description: Delete a building by Id
      parameters:
      - description: Building Id
        in: path
        name: buildingId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete building
      tags:
      - buildings
    patch:
      description: Update a building by its Id
      parameters:
      - description: Building ID
        in: path
        name: buildingId
        required: true
        type: integer
      - description: Building data
        in: body
        name: buildingData
        required: true
        schema:
          $ref: '#/definitions/model.Building'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Update a building by its Id
      tags:
      - buildings
  /building/byId/{buildingId}:
    get:
      description: Retrieve a building by its Id
      parameters:
      - description: Building ID
        in: path
        name: buildingId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Building'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a building by its Id
      tags:
      - buildings
  /building/byShortName/{buildingShortName}:
    get:
      description: Retrieve a building by its abbreviated name
      parameters:
      - description: Building abbreviation
        in: path
        name: buildingShortName
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Building'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a building by its abbreviated name
      tags:
      - buildings
  /buildings:
    get:
      description: Retrieve list of all building objects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BuildingList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of all building objects
      tags:
      - buildings
  /machineRole:
    post:
      consumes:
      - application/json
      description: Add a new machine role
      parameters:
      - description: Machine Role data
        in: body
        name: machineRole
        required: true
        schema:
          $ref: '#/definitions/model.MachineRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register machine role
      tags:
      - machine-roles
  /machineRole/{machineRoleId}:
    delete:
      consumes:
      - application/json
      description: Delete a machine role by Id
      parameters:
      - description: Machine Role Id
        in: path
        name: machineRoleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete machine role
      tags:
      - machine-roles
    patch:
      description: Update a machine role by its Id
      parameters:
      - description: Machine Role ID
        in: path
        name: machineRoleId
        required: true
        type: integer
      - description: Machine Role data
        in: body
        name: machineRoleData
        required: true
        schema:
          $ref: '#/definitions/model.MachineRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Update a machine role by its Id
      tags:
      - machine-roles
  /machineRole/byId/{machineRoleId}:
    get:
      description: Retrieve a machine role by its Id
      parameters:
      - description: Machine Role ID
        in: path
        name: machineRoleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MachineRole'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a machine role by its Id
      tags:
      - machine-roles
  /machineRoles:
    get:
      description: Retrieve list of all machine roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MachineRoleList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of all machine roles
      tags:
      - machine-roles
  /networkInterface:
    post:
      consumes:
      - application/json
      description: Add a new network interface
      parameters:
      - description: Network Interface data
        in: body
        name: networkInterface
        required: true
        schema:
          $ref: '#/definitions/model.NetworkInterface'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register network interface
      tags:
      - network-interfaces
  /networkInterface/{networkInterfaceId}:
    delete:
      consumes:
      - application/json
      description: Delete a network interface by Id
      parameters:
      - description: Network Interface Id
        in: path
        name: networkInterfaceId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete network interface
      tags:
      - network-interfaces
    patch:
      description: Update a network interface by its Id
      parameters:
      - description: Network Interface ID
        in: path
        name: networkInterfaceId
        required: true
        type: integer
      - description: Network Interface data
        in: body
        name: networkInterfaceData
        required: true
        schema:
          $ref: '#/definitions/model.MachineRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Update a network interface by its Id
      tags:
      - network-interfaces
  /networkInterface/byId/{networkInterfaceId}:
    get:
      description: Retrieve a network interface by its Id
      parameters:
      - description: Network Interface ID
        in: path
        name: networkInterfaceId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.NetworkInterface'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a network interface by its Id
      tags:
      - network-interfaces
  /networkInterface/byIpAddress/{networkInterfaceIpAddress}:
    get:
      description: Retrieve a network interface by its IP Address
      parameters:
      - description: Network Interface IP Address
        in: path
        name: networkInterfaceIpAddress
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.NetworkInterface'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a network interface by its IP Address
      tags:
      - network-interfaces
  /networkInterface/byMACAddress/{networkInterfaceMACAddress}:
    get:
      description: Retrieve a network interface by its MAC Address
      parameters:
      - description: Network Interface MAC Address
        in: path
        name: networkInterfaceMACAddress
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.NetworkInterface'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a network interface by its MAC Address
      tags:
      - network-interfaces
  /networkInterfaces:
    get:
      description: Retrieve list of all network interfaces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.NetworkInterfaces'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of all network interfaces
      tags:
      - network-interfaces
  /networkInterfaces/{systemId}:
    get:
      description: Retrieve the list of network interfaces for a system's Id
      parameters:
      - description: System ID
        in: path
        name: systemId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.NetworkInterfaces'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve the list of network interfaces for a system's Id
      tags:
      - network-interfaces
  /operatingSystem:
    post:
      consumes:
      - application/json
      description: Add a new operating system
      parameters:
      - description: Operating System data
        in: body
        name: operatingSystem
        required: true
        schema:
          $ref: '#/definitions/model.OperatingSystem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register operating system
      tags:
      - operating-systems
  /operatingSystem/{osId}:
    delete:
      consumes:
      - application/json
      description: Delete an operating system by Id
      parameters:
      - description: Operating System Id
        in: path
        name: osId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete operating system
      tags:
      - operating-systems
    patch:
      description: Update an operating system by its Id
      parameters:
      - description: Operating System ID
        in: path
        name: operatingSystemId
        required: true
        type: integer
      - description: Operating System data
        in: body
        name: operatingSystemData
        required: true
        schema:
          $ref: '#/definitions/model.OperatingSystem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Update an operating system by its Id
      tags:
      - operating-systems
  /operatingSystem/byFamilyId/{osFamilyId}:
    get:
      description: Retrieve an operating system by its family Id
      parameters:
      - description: Operating System Family ID
        in: path
        name: osFamilyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OperatingSystem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve an operating system by its family Id
      tags:
      - operating-systems
  /operatingSystem/byId/{osId}:
    get:
      description: Retrieve an operating system by its Id
      parameters:
      - description: Operating System ID
        in: path
        name: osId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OperatingSystem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve an operating system by its Id
      tags:
      - operating-systems
  /operatingSystems:
    get:
      description: Retrieve list of all operating systems
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OperatingSystemList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of all operating systems
      tags:
      - operating-systems
  /organizationalUnit:
    post:
      consumes:
      - application/json
      description: Add a new organizational unit
      parameters:
      - description: Organizational Unit data
        in: body
        name: orgUnit
        required: true
        schema:
          $ref: '#/definitions/model.OrgUnit'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register organizational unit
      tags:
      - orgs
  /organizationalUnit/{ouId}:
    delete:
      consumes:
      - application/json
      description: Delete an organizational unit
      parameters:
      - description: Organizational Unit Id
        in: path
        name: ouId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete OU
      tags:
      - orgs
  /organizationalUnit/byId/{ouId}:
    get:
      description: Retrieve an organizational unit by its Id
      parameters:
      - description: Organizationl Unit ID
        in: path
        name: ouId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OrgUnit'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve an organizational unit by its Id
      tags:
      - orgs
  /organizationalUnits:
    get:
      description: Retrieve list of all organizational units
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OrgUnitList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of all organizational units
      tags:
      - orgs
  /osFamilies:
    get:
      description: Retrieve list of all storage volumes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OperatingSystemFamilyList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of all storage volumes
      tags:
      - operating-system-families
  /osFamily:
    post:
      consumes:
      - application/json
      description: Add a new operating system family
      parameters:
      - description: Operating System Family data
        in: body
        name: osFamily
        required: true
        schema:
          $ref: '#/definitions/model.OperatingSystemFamily'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register operating system family
      tags:
      - operating-system-families
  /osFamily/{storageVolumeId}:
    delete:
      consumes:
      - application/json
      description: Delete an operating system family
      parameters:
      - description: Operating System Family Id
        in: path
        name: osFamilyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete operating system family
      tags:
      - operating-system-families
  /osFamily/byId/{osFamilyId}:
    get:
      description: Retrieve an operating system family by its Id
      parameters:
      - description: Operating System Family ID
        in: path
        name: osFamilyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OperatingSystemFamily'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve an operating system family by its Id
      tags:
      - operating-system-families
  /osFamily/byName/{osFamilyName}:
    get:
      description: Retrieve an operating system family by its name
      parameters:
      - description: Operating System Family Name
        in: path
        name: osFamilyName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OperatingSystemFamily'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve an operating system family by its name
      tags:
      - operating-system-families
  /role:
    post:
      consumes:
      - application/json
      description: Add a new role
      parameters:
      - description: Role data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register role
      tags:
      - role
  /role/{roleId}:
    delete:
      consumes:
      - application/json
      description: Delete a role
      parameters:
      - description: Role Id
        in: path
        name: roleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete role
      tags:
      - role
  /role/byId/{roleId}:
    get:
      description: Retrieve a role by its Id
      parameters:
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a role by its Id
      tags:
      - role
  /role/byName/{roleName}:
    get:
      description: Retrieve a role by its role name
      parameters:
      - description: Role Name
        in: path
        name: roleName
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a role by its role name
      tags:
      - role
  /roles:
    get:
      description: Retrieve list of all roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RolesList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of all roles
      tags:
      - role
  /storageVolume:
    post:
      consumes:
      - application/json
      description: Add a new storage volume
      parameters:
      - description: Storage Volume data
        in: body
        name: storageVolume
        required: true
        schema:
          $ref: '#/definitions/model.StorageVolume'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register storage volume
      tags:
      - storage-volumes
  /storageVolume/{storageVolumeId}:
    delete:
      consumes:
      - application/json
      description: Delete a storage volume
      parameters:
      - description: Storage Volume Id
        in: path
        name: storageVolumeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete storage volume
      tags:
      - storage-volumes
    patch:
      description: Update a storage volume by its Id
      parameters:
      - description: Storage Volume ID
        in: path
        name: storageVolumeId
        required: true
        type: integer
      - description: Storage Volume data
        in: body
        name: storageVolumeData
        required: true
        schema:
          $ref: '#/definitions/model.StorageVolume'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Update a storage volume by its Id
      tags:
      - storage-volumes
  /storageVolume/{systemId}/byLabel/{storageVolumeLabel}:
    get:
      description: Retrieve a storage volume by its volume label and system Id
      parameters:
      - description: System ID
        in: path
        name: systemId
        required: true
        type: integer
      - description: Storage Volume Label
        in: path
        name: storageVolumeLabel
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StorageVolume'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a storage volume by its volume label and system Id
      tags:
      - storage-volumes
  /storageVolume/byId/{storageVolumeId}:
    get:
      description: Retrieve a storage volume by its Id
      parameters:
      - description: Storage Volume ID
        in: path
        name: storageVolumeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StorageVolume'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a storage volume by its Id
      tags:
      - storage-volumes
  /storageVolumes:
    get:
      description: Retrieve list of all storage volumes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StorageVolumes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of all storage volumes
      tags:
      - storage-volumes
  /storageVolumes/{systemId}:
    get:
      description: Retrieve storage volumes by system Id
      parameters:
      - description: System ID
        in: path
        name: systemId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StorageVolumes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve storage volumes by system Id
      tags:
      - storage-volumes
  /user:
    post:
      consumes:
      - application/json
      description: Add a new user
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.ProposedUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register user
      tags:
      - user
  /user/{name}:
    delete:
      consumes:
      - application/json
      description: Delete a user
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete user
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Change password
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      - description: Password data
        in: body
        name: changePassword
        required: true
        schema:
          $ref: '#/definitions/model.PasswordChange'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Change password
      tags:
      - user
  /user/{name}/ouId:
    patch:
      consumes:
      - application/json
      description: Set a user's organizational unit Id
      parameters:
      - description: Organizational Unit Id
        in: body
        name: ouId
        required: true
        schema:
          $ref: '#/definitions/model.UserOrgUnitId'
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserOrgUnitIdMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Set a user's organizational unit Id
      tags:
      - user
  /user/{name}/roleId:
    patch:
      consumes:
      - application/json
      description: Set a user's role Id
      parameters:
      - description: Role Id
        in: body
        name: roleId
        required: true
        schema:
          $ref: '#/definitions/model.UserRoleId'
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserRoleIdMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Set a user's role Id
      tags:
      - user
  /user/{name}/status:
    get:
      consumes:
      - application/json
      description: Retrieve a user's active status
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserStatusMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a user's active status. Can be either 'enabled' or 'locked'
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Set a user's active status
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserStatus'
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserStatusMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Set a user's active status. Can be either 'enabled' or 'locked'
      tags:
      - user
  /user/id/{id}:
    get:
      description: Retrieve a user by their Id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SafeUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve a user by their Id
      tags:
      - user
  /user/name/{name}:
    get:
      description: Retrieve a user by their UserName
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SafeUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve a user by their UserName
      tags:
      - user
  /users:
    get:
      description: Retrieve list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UsersList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of all users
      tags:
      - user
  /users/byOuId/{ouId}:
    get:
      description: Retrieve list of users by Organizational Unit Id
      parameters:
      - description: Organizational Unit Id
        in: path
        name: ouId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UsersList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of users by Organizational Unit Id
      tags:
      - user
  /users/byRoleId/{roleId}:
    get:
      description: Retrieve list of users by role Id
      parameters:
      - description: Role Id
        in: path
        name: roleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UsersList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of users by role Id
      tags:
      - user
  /vendor:
    post:
      consumes:
      - application/json
      description: Add a new vendor
      parameters:
      - description: Vendor data
        in: body
        name: vendor
        required: true
        schema:
          $ref: '#/definitions/model.Vendor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register vendor
      tags:
      - vendors
  /vendor/{vendorId}:
    delete:
      consumes:
      - application/json
      description: Delete a vendor
      parameters:
      - description: Vendor Id
        in: path
        name: vendorId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete Vendor
      tags:
      - vendors
  /vendor/byId/{ouId}:
    get:
      description: Retrieve a vendor by its Id
      parameters:
      - description: Vendor ID
        in: path
        name: vendorId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Vendor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a vendor by its Id
      tags:
      - vendors
  /vendorss:
    get:
      description: Retrieve list of all vendors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.VendorList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of all vendors
      tags:
      - vendors
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
